{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RAMYA\\\\Taskify\\\\taskify-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]); // State to store tasks\n\n  // Load tasks from local storage on component mount\n  useEffect(() => {\n    const savedTasks = JSON.parse(localStorage.getItem('tasks')) || [];\n    setTasks(savedTasks);\n  }, []);\n\n  // Save tasks to local storage whenever they change\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  // Add task function\n  const addTask = task => {\n    setTasks([...tasks, task]);\n  };\n\n  // Delete task function\n  const deleteTask = taskToDelete => {\n    setTasks(tasks.filter(task => task !== taskToDelete));\n  };\n\n  // Edit task function\n  const editTask = (oldTask, updatedTask) => {\n    setTasks(tasks.map(task => task === oldTask ? updatedTask : task));\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(TaskForm, {\n            tasks: tasks,\n            addTask: addTask,\n            deleteTask: deleteTask,\n            editTask: editTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"weOf0VesAdD4xw+rXOOhYK4d8/M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","savedTasks","JSON","parse","localStorage","getItem","setItem","stringify","addTask","task","deleteTask","taskToDelete","filter","editTask","oldTask","updatedTask","map","children","Navbar","fileName","_jsxFileName","lineNumber","columnNumber","className","path","element","TaskForm","_c","$RefreshReg$"],"sources":["C:/Users/RAMYA/Taskify/taskify-frontend/src/App.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  const [tasks, setTasks] = useState([]); // State to store tasks\r\n\r\n  // Load tasks from local storage on component mount\r\n  useEffect(() => {\r\n    const savedTasks = JSON.parse(localStorage.getItem('tasks')) || [];\r\n    setTasks(savedTasks);\r\n  }, []);\r\n\r\n  // Save tasks to local storage whenever they change\r\n  useEffect(() => {\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  // Add task function\r\n  const addTask = (task) => {\r\n    setTasks([...tasks, task]);\r\n  };\r\n\r\n  // Delete task function\r\n  const deleteTask = (taskToDelete) => {\r\n    setTasks(tasks.filter((task) => task !== taskToDelete));\r\n  };\r\n\r\n  // Edit task function\r\n  const editTask = (oldTask, updatedTask) => {\r\n    setTasks(tasks.map((task) => (task === oldTask ? updatedTask : task)));\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <div className=\"container\">\r\n        <Routes>\r\n          <Route\r\n            path=\"/\"\r\n            element={<TaskForm tasks={tasks} addTask={addTask} deleteTask={deleteTask} editTask={editTask} />}\r\n          />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\nexport default App;"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;IAClEL,QAAQ,CAACC,UAAU,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAX,SAAS,CAAC,MAAM;IACdc,YAAY,CAACE,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAACK,SAAS,CAACR,KAAK,CAAC,CAAC;EACtD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMS,OAAO,GAAIC,IAAI,IAAK;IACxBT,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEU,IAAI,CAAC,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMC,UAAU,GAAIC,YAAY,IAAK;IACnCX,QAAQ,CAACD,KAAK,CAACa,MAAM,CAAEH,IAAI,IAAKA,IAAI,KAAKE,YAAY,CAAC,CAAC;EACzD,CAAC;;EAED;EACA,MAAME,QAAQ,GAAGA,CAACC,OAAO,EAAEC,WAAW,KAAK;IACzCf,QAAQ,CAACD,KAAK,CAACiB,GAAG,CAAEP,IAAI,IAAMA,IAAI,KAAKK,OAAO,GAAGC,WAAW,GAAGN,IAAK,CAAC,CAAC;EACxE,CAAC;EAED,oBACEb,OAAA,CAACJ,MAAM;IAAAyB,QAAA,gBACLrB,OAAA,CAACsB,MAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV1B,OAAA;MAAK2B,SAAS,EAAC,WAAW;MAAAN,QAAA,eACxBrB,OAAA,CAACF,MAAM;QAAAuB,QAAA,eACLrB,OAAA,CAACH,KAAK;UACJ+B,IAAI,EAAC,GAAG;UACRC,OAAO,eAAE7B,OAAA,CAAC8B,QAAQ;YAAC3B,KAAK,EAAEA,KAAM;YAACS,OAAO,EAAEA,OAAQ;YAACE,UAAU,EAAEA,UAAW;YAACG,QAAQ,EAAEA;UAAS;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;AAACxB,EAAA,CA1CQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA2CZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}